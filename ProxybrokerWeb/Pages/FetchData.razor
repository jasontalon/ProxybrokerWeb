@* @page "/fetchdata" *@
@* *@
@* <PageTitle>Weather forecast</PageTitle> *@
@* *@
@* @using ProxybrokerWeb.Data *@
@* @using System.Globalization *@
@* @inject WeatherForecastService ForecastService *@
@* @inject ILogger<FetchData> _logger *@
@* @inject NavigationManager _NavigationManager; *@
@* <h1>Weather forecast</h1> *@
@* *@
@* <p>This component demonstrates fetching data from a service.</p> *@
@* *@
@* <button @onclick="TestMe">Test Me</button> *@
@* @if (forecasts == null) *@
@* { *@
@*     <p> *@
@*         <em>Loading...</em> *@
@*     </p> *@
@* } *@
@* else *@
@* { *@
@*     <h3>@time</h3> *@
@*     <table class="table"> *@
@*         <thead> *@
@*         <tr> *@
@*             <th>Date</th> *@
@*             <th>Temp. (C)</th> *@
@*             <th>Temp. (F)</th> *@
@*             <th>Summary</th> *@
@*         </tr> *@
@*         </thead> *@
@*         <tbody> *@
@*         @foreach (var forecast in forecasts) *@
@*         { *@
@*             <tr> *@
@*                 <td>@forecast.Date.ToShortDateString()</td> *@
@*                 <td>@forecast.TemperatureC</td> *@
@*                 <td>@forecast.TemperatureF</td> *@
@*                 <td>@forecast.Summary</td> *@
@*             </tr> *@
@*         } *@
@*         </tbody> *@
@*     </table> *@
@* } *@
@* *@
@* @code { *@
@*     private WeatherForecast[]? forecasts; *@
@*     private string? time; *@
@* *@
@*     protected override async Task OnInitializedAsync() *@
@*     { *@
@*         forecasts = await ForecastService.GetForecastAsync(DateTime.Now); *@
@* *@
@*         time = "Jason Talon"; *@
@*         _logger.LogInformation(nameof(OnInitializedAsync)); *@
@*     } *@
@* *@
@*     void TestMe() *@
@*     { *@
@*         time = DateTime.UtcNow.ToString(CultureInfo.InvariantCulture); *@
@*     } *@
@* *@
@* } *@